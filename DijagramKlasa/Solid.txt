SOLID principi:

1. Princip pojedinačne odgovornosti

Princip pojedinačne odgovornosti ili SRP kaže da bi svaka klasa trebala imati 
samo jedan razlog za promjenu. Pod ovim se misli da klasa treba da se bavi samo 
jednom konkretnom stvari, dakle, klase treba da imaju pojedinačnu odgovornost. 
Vidimo da u dijagramu klasa imamo klase Vozilo i Vozac, klasa Vozac se veže za 
klasu Vozilo ali one obavljaju različite stvari, posmatrajuči i ostale klase 
uočavamo da SRP princip nije narušen.

2. Otvoreno zatvoren princip

Otvoreno zatvoren princip ili OCP glasi: Entiteti softvera (klase, moduli, 
funkcije) trebali bi biti otvoreni za nadogradnju, ali zatvoreni za 
modifikacije. To znači da treba da se može mijenjati okruženje oko modula ali 
ne i sam modul. U klasi Ruta vidimo da ima vezu sa interfejsom Google Maps, 
tako da nikakve promjene koje se dešavaju u interfejsu Google Maps ne mogu 
uticati na promjene u klasi Ruta. Sve ostale klase su korektno modifikovane i 
do neke mjere se mogu nadograditi, što bi bilo i poželjno.

3. Liskov princip zamjene

Liskov princip zamjene ili LSP kaže da podtipovi moraju biti zamjenjivi 
njihovim osnovnim tipovima. Ovaj princip se odnosi na nasljeđivanje a kako 
vidimo u dijagramu klasa imamo nasljeđivanje klase RegistrovanaMušterija iz 
Mušterija. Između klase RegistrovanaMušterija i Mušterija nema razloga da bi se 
ovaj princip narušio jer trenutno i ne postoji metoda u klasi Mušterija koja se 
ne bi mogla implementirati u izvedenoj klasi RegistrovanaMušterija tj. metoda 
koja bi bila besmislena u klasi RegistrovanaMušterija za implementaciju. Tako 
da je Liskov princip zadovoljen.

4. Princip inverzije ovisnosti

Moduli visokog nivoa ne bi trebali ovisiti od modula niskog nivoa, oba bi trebalo 
da ovise od apstrakcija. Nasljedjivanje klasa vrsi se iz apstraktne klase 
(npr. iz apstraktne klase Zaposlenik naslijedjene su klase Vozac, Dispecer i Supervizor), 
te izvedene klase zavise od apstraktne klase, ali ne i jedna od druge. Promjena u klasi Vozac 
ne dovodi do promjene u ostalim izvedenim klasama, niti u samoj apstraktnoj klasi. Ista neovisnost 
je prisutna u slucaju promjene u klasama Musterija i RegistrovanaMusterija. Na osnovu navedenog 
mozemo zakljuciti da je ispunjen princip inverzije ovisnosti.

5. Princip izoliranja interfejsa

Iako neke od klasa, zbog veceg broja metoda, podsjecaju na "debele" klase, ipak su vecina tih metoda neophodne get i set metode. Metode koje se odnosena funkcionalnost klase i sistema su osnovne metode potrebne korisnicima i koje ce oni cesto koristiti. Dakle, na dijagramu se ne pojavljuju "debele" klase  te mozemo zakljuciti da je ispunjen i posljenji od pet SOLID principa.
